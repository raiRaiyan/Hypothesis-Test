<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 currentState="state1"
		 contentBackgroundColor="0xeeecec"
		 stateChangeComplete="backbone_stateChangeCompleteHandler(event)">
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<fx:Metadata>
		[Event(name="colNamesAvailable", type="flash.events.Event")]
		[Event(name="valuesAvailable", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import assets.LoadCsvFiles;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.utils.object_proxy;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.IndexChangeEvent;
			
			//Public flags to indicate completion of input in a panel
			[Bindable] //needed to show back to csv button
			public var csvDoneFlag:Boolean = false;
			[Bindable] //needed to vanish the go to next button
			public var panel1Flag:Boolean = false;
			[Bindable] //needed to vanish the go the next button
			public var panel2Flag:Boolean = false;
			public var hypoFlag:Boolean = false;
			
			//needed to stop the output being shown in case there is error
			//For the csv calculation part
			public var errorFlag:Boolean = false;
			
			public var backToCSVFlag:Boolean = false;
			
			//Public variables needed for the UI
			[Bindable]
			public var popnMeanValue:Number;
			[Bindable]
			public var varName:String = null;
			
			//CSV Loading variables
			private var csvLoader:LoadCsvFiles;
			private var numRowsDisplayed:int = 1000;
			
			//Variables needed for the native process
			//Inputs
			public var testFlag:String; //0 - One Sample T, 1 - Two Sample T, 2 - Paired Mean
			public var csvFile:File;//File Variable for the browse
			public var tails:String; //0 - 2 tailed, 1 - lower tail, 2 - upper tail
			
			//Outputs
			private var dataIn:String;
			private var pValue:Number;
			public var sigLevel:Number;
			
			
			//variables for the native process startup info
			public var proc:NativeProcess = null;
			public var procInfo:NativeProcessStartupInfo = null;
			
			public var exe:File = new File("C:/Program Files/R/R-3.2.1/bin/Rscript.exe");
			public var workingDir:File = File.applicationDirectory.resolvePath("working");
			public var args:Vector.<String> = null; //set from inherited class
			public var rFile:String = null; //set from inherited class
			
			//Variables for the datagrid control
			[Bindable(event="colNamesAvailable")]
			public var colnames:ArrayCollection; //use this to populate the column selection combobox
			
			//Variable for reading the Mean,SD n size from the process
			[Bindable(event="valuesAvailable")]
			public var values:Array;
			
			
			//Inherit this method to add elements to the backbone
			protected function backbone_stateChangeCompleteHandler(event:FlexEvent):void
			{
				if(currentState == 'result')
				{
					//Need to enable this since on state change the default value is disabled
					//output.visible = true;
					//imgViewer.visible = true;
				}
			}
			
			//Do not disturb this function
			private function browseButton_clickHandler(event:MouseEvent):void
			{
				browseButton.enabled = false;
				csvFile = new File();
				var filter:FileFilter = new FileFilter("Data File","*.csv");
				csvFile.browseForOpen("Select a CSV file",[filter]);
				csvFile.addEventListener(Event.SELECT,fileSelected);
				csvFile.addEventListener(Event.CANCEL,fileNotSelected);
				
			}
			
			private function fileNotSelected(event:Event):void
			{
				browseButton.enabled = true;
			}
			
			
			//Do not disturb this function
			private function fileSelected(evt:Event):void
			{
				csvPath.text = csvFile.name+" { "+csvFile.nativePath+" }";
				
				csvLoader = new LoadCsvFiles(csvFile);
				csvData.columns= csvLoader.loadColumnName();
				colnames = new ArrayCollection(csvLoader.columnNames);
				dispatchEvent(new Event("colNamesAvailable"));
				csvData.dataProvider = csvLoader.readLines(numRowsDisplayed);
				if(csvLoader.hasData())
				{
					gridNextButton.visible = true;
				}
				rowCountLabel.text = (csvLoader.numRows-csvData.dataProviderLength+1).toString() + " to " + csvLoader.numRows.toString();
				
				csvData.visible=true;
				columnSelectionPane.visible = true;
			}
			
			protected function gridNextButton_clickHandler(event:MouseEvent):void
			{
				if(!csvLoader.isBeginning())
				{
					gridPrevButton.visible=true;
					gridPrevButton.enabled=true;
				}
				csvLoader.pushPosition();
				csvData.dataProvider=csvLoader.readLines(numRowsDisplayed);
				
				if(!csvLoader.hasData())
				{
					gridNextButton.enabled = false;
				}
				else
				{
					gridNextButton.visible = true;
					gridNextButton.enabled = true;
				}
				
				rowCountLabel.text = (csvLoader.numRows-csvData.dataProviderLength+1).toString() + " to " + csvLoader.numRows.toString();
			}
			
			protected function gridPrevButton_clickHandler(event:MouseEvent):void
			{
				csvLoader.setPreviousPosition();
				gridNextButton.enabled=true;
				gridPrevButton.enabled = true;
				if(csvLoader.isBeginning()){
					gridPrevButton.enabled= false;
				}
				csvData.dataProvider = csvLoader.readLines(numRowsDisplayed);
				rowCountLabel.text = (csvLoader.numRows-csvData.dataProviderLength+1).toString() + " to " + csvLoader.numRows.toString();
			}
			
			//Inherit this function and override
			protected function csvPaneDoneButton_clickHandler(event:MouseEvent):void
			{
				//add the variables to the "args" and rFile
				if(csvDoneFlag)
				{
					proc=new NativeProcess();
					procInfo = new NativeProcessStartupInfo();
					
					procInfo.executable = exe;
					procInfo.arguments = args;
					procInfo.workingDirectory = workingDir;
					
					//Event Handlers
					proc.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
					proc.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
					proc.addEventListener(NativeProcessExitEvent.EXIT,onProcessExit);
					
					errorFlag = false;
					
					proc.start(procInfo);
					csvPaneDoneButton.enabled = false;
				}
			}	
			
			protected function backToCSVButton_clickHandler(event:MouseEvent):void
			{
				backToCSVFlag = true;
				currentState = 'loadCSV';
			}
			
			protected function panel1NextButton_clickHandler(event:MouseEvent):void
			{
				//set the variable varName if its null
				//set it as X or X-Y depending on the test
				
				//Inherited class must set the flag to true after it gets all the values
				if(panel1Flag==true)
				{
					currentState='state2';
					csvDoneFlag = false;
					
					//remove the goto next button
					panel1NextButton.visible = false;
					panel1NextButton.includeInLayout = false;
					
					//Edit panel
					panel1DoneButton.visible = true;
					panel1EditButton.visible = true;
					panel1EditButton.includeInLayout = true;
					panel1DoneButton.includeInLayout = true;
				}
			}
			
			protected function panel1EditButton_clickHandler(event:MouseEvent):void
			{
				//Implement this in the individual tests
			}
			
			protected function panel1DoneButton_clickHandler(event:MouseEvent):void
			{
				//Implement this in the individual tests
			}
			
			private function checksOnPanel2():Boolean
			{
				var result:Boolean = true;
				if(popnMeanInput.text=="")
				{
					//Error handling
					popnMeanInput.errorString = "Enter a value";
					result = false;
				}
				
				if(sigLevelInput.text=="")
				{
					//Error handling
					sigLevelInput.errorString = "Enter a value";
					result = false;
				}
					
				else
				{
					sigLevel = Number(sigLevelInput.text);
					if(sigLevel>=1 || sigLevel<=0)
					{
						sigLevelInput.text=null;
						sigLevelInput.errorString = "Value should be between 0 and 1";
						result = false;
					}
				}
				return result;
			}
			
			protected function panel2NextButton_clickHandler(event:MouseEvent):void
			{
				if(checksOnPanel2())
				{
					//read the value
					popnMeanValue=Number(popnMeanInput.text);
					
					panel2Flag=true;
					popnMeanInput.editable = false;
					sigLevelInput.editable = false;
					
					//Vanish the next button
					panel2NextButton.visible = false;
					panel2NextButton.includeInLayout = false;
					
					//Edit pane enabling
					panel2EditButton.visible = true;
					panel2EditButton.includeInLayout = true;
					panel2DoneButton.includeInLayout = true;
					panel2DoneButton.visible = true;
				}
				
				//Inherited class must set the flag to true after it gets all the values
				if(panel2Flag==true)
				{
					currentState='state3';
					panel2NextButton.enabled = false;
				}
			}
			
			protected function panel2EditButton_clickHandler(event:MouseEvent):void
			{
				panel2Flag = false;
				popnMeanInput.editable = true;
				sigLevelInput.editable = true;
				
				panel2EditButton.enabled = false;
				panel2DoneButton.enabled = true;
			}
			
			protected function panel2DoneButton_clickHandler(event:MouseEvent):void
			{
				if(checksOnPanel2())
				{
					//update the popn mean value
					popnMeanValue=Number(popnMeanInput.text);
					
					panel2Flag=true;
					popnMeanInput.editable = false;
					sigLevelInput.editable = false;
					
					panel2EditButton.enabled = true;
					panel2DoneButton.enabled = false;
				}
				
			}
			
			protected function hypoExpression_changeHandler(event:IndexChangeEvent):void
			{
				if(hypoExpression.selectedIndex==-3)
				{
					hypoExpression.selectedIndex=-1;
				}
				else
				{
					switch(hypoExpression.selectedIndex)
					{
						case 0:
							alternateExpr.text = "!=";
							tails="0";
							break;
						case 1:
							alternateExpr.text = "<";
							tails="1";
							break;
						case 2:
							alternateExpr.text = ">";
							tails="2";
							break;
					}
					altHypo.visible=true;
					hypoFlag=true;
				}
			}
			
			//Inherit this and override
			protected function compute_clickHandler(event:MouseEvent):void
			{
				//Inherit this function and initialize and populate the args n rFile
				
				if(hypoFlag==true)
				{
					proc=new NativeProcess();
					procInfo = new NativeProcessStartupInfo();
					
					procInfo.executable = exe;
					procInfo.arguments = args;
					procInfo.workingDirectory = workingDir;
					
					//Event Handlers
					proc.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
					proc.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
					proc.addEventListener(NativeProcessExitEvent.EXIT,onProcessExit);
					
					proc.start(procInfo);
					compute.enabled = false;
				}
				
			}
			
			public function onOutputData(event:ProgressEvent):void
			{
				if(hypoFlag)
				{
					//Read the P-Value
					dataIn = proc.standardOutput.readUTFBytes(proc.standardOutput.bytesAvailable);
					pValue = Number(dataIn);
				}
				else
				{
					dataIn = proc.standardOutput.readUTFBytes(proc.standardOutput.bytesAvailable);
				}
			}
			
			public function onErrorData(event:ProgressEvent):void
			{
				//Capture the error message
				var err:String = proc.standardError.readUTFBytes(proc.standardError.bytesAvailable);
				var naError:int = err.search("NA");
				if(naError!=-1)
				{
					errorFlag = true;
					Alert.show("Please select a numeric column","Oops.!!");
				}
			}
			
			public function onProcessExit(event:NativeProcessExitEvent):void
			{
				if(event.exitCode==0 && hypoFlag)
				{
					currentState='result';
					
					//Set the text to the TextArea
					output.visible = false;
					output.text ="P-Value is : "+String(pValue)+"\n";
					if(pValue<sigLevel)
					{
						output.text+= "Null Hypothesis is rejected\n";
					}
					else
					{
						output.text+= "Null Hypothesis cannot be rejected\n";
					}
					output.visible = true;
					
					//Set image source to the image viewer
					imgViewer.visible = false;
					imgViewer.source = null;
					imgViewer.source = "/working/outputImg.png";
					imgViewer.validateNow(); //sometimes source change takes time to register
					imgViewer.visible = true;
					
					compute.enabled = true;
				}
				if(event.exitCode==0 && csvDoneFlag && !errorFlag)
				{
					values = dataIn.split(",");
					dispatchEvent(new Event("valuesAvailable"));
					currentState = 'state1Final';
					csvPaneDoneButton.enabled = true;
				}
			}
			
			protected function imgViewer_clickHandler(event:MouseEvent):void
			{
				var img:File = File.applicationDirectory.resolvePath("working/outputImg.png");
				img.openWithDefaultApplication();
			}
			
			//Common function to check whether the entered value is a number or not
			//Attach listeners from all the text inputs
			protected function checkNumber(event:FocusEvent):void
			{
				event.currentTarget.errorString = null;
				var num:Number = new Number(event.currentTarget.text);
				if(isNaN(num))
				{
					event.currentTarget.text = "";
					event.currentTarget.errorString = "That was an invalid number";
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML xmlns="" id="stringCollection" source="strings/StringCollection.xml"/>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="state1"/>
		<s:State name="loadCSV"/>
		<s:State name="state1Final"/>
		<s:State name="state2"/>
		<s:State name="state3"/>
		<s:State name="result"/>
	</s:states>
	
	<s:transitions>
		
		<s:Transition fromState="state1" toState="loadCSV">
			<s:Resize target="{panel1}" widthTo="{inputPane.width*0.8}" heightTo="{inputPane.height*0.8}"/>
		</s:Transition>
		
		<s:Transition fromState="loadCSV" toState="state1Final">
			<s:Resize target="{panel1}" widthTo="{inputPane.width*0.4}" heightTo="{inputPane.height*0.6}"/>
		</s:Transition>
		
		<s:Transition fromState="state1Final" toState="state2">
			<s:Parallel target="{panel2}">
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="state2" toState="state3">
			<s:Parallel targets="{[panel3]}">
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="state3" toState="result">
			<s:Parallel targets="{[output,imgViewer]}">
				<s:AddAction targets="{[output,imgViewer]}"/>
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
	</s:transitions>
	
	<s:Group id="inputPane" width="70%" height="100%">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<s:Panel id="panel1" width="40%" height="60%" 
				 width.loadCSV="80%"
				 height.loadCSV="80%"
				 x="{inputPane.width*0.07}" y="{inputPane.height*0.06}"
				 title="Sample Data">
			
			<s:VGroup id="OptionsPane" horizontalAlign="center" verticalAlign="middle"
					  width="100%" height="100%" includeIn="state1">
				<s:Button label="I have CSV" click="currentState='loadCSV';"/>
				<s:Button label="I have data" click="currentState='state1Final';"/>
			</s:VGroup>
			
			<s:VGroup id="csvPane" horizontalAlign="center" verticalAlign="middle"
					  width="100%" height="100%" includeIn="loadCSV">
				<s:HGroup width="95%" height="15%" horizontalAlign="left" verticalAlign="middle">
					<s:TextInput width="70%" height="30" id="csvPath" prompt="Browse for the file"
								 fontSize="14"/>
					<s:Spacer width="5%"/>
					<s:Button width="100" height="30" id="browseButton" 
							  label="Browse" click="browseButton_clickHandler(event)"
							  fontSize="14"/>
				</s:HGroup>
				<s:HGroup width="100%" height="80%" horizontalAlign="center" verticalAlign="middle">
					<s:Spacer width="1%"/>
					<s:VGroup width="68%" height="95%" horizontalAlign="center" verticalAlign="middle">
						<s:DataGrid width="100%" height="90%" id="csvData" visible="false"
									horizontalScrollPolicy="auto"/>
						<s:HGroup width="100%" height="10%" horizontalAlign="center" verticalAlign="middle">
							<s:Button id="gridPrevButton" label="Prev" click="gridPrevButton_clickHandler(event)"
									  visible="false"/>
							<s:Label text="Rows Displayed :"/>
							<s:Label id="rowCountLabel" />
							<s:Button id="gridNextButton" label="Next" click="gridNextButton_clickHandler(event)"
									  visible="false"/>
						</s:HGroup>
					</s:VGroup>
					<s:Spacer width="1%"/>
					<s:VGroup width="30%" height="100%" horizontalAlign="center" verticalAlign="middle">
						
						<s:VGroup width="100%" height="85%" id="columnSelectionPane"
								  horizontalAlign="center" verticalAlign="middle" visible="false">
							
							<!--Child components for column selection inherited class goes here-->
							
						</s:VGroup>
						
						<s:Button click="csvPaneDoneButton_clickHandler(event)" label="Done" id="csvPaneDoneButton"
								  width="100" height="30" fontSize="14"/>
						
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
			
			<s:VGroup id="finalPanel1" horizontalAlign="center" verticalAlign="middle"
					  width="100%" height="100%" includeIn="state1Final,state2,state3,result">
				<s:VGroup id="SampleParams" horizontalAlign="center" verticalAlign="middle"
						  width="95%" height="85%">
					
					<!-- Placeholder for Sample Data elements-->
					
				</s:VGroup>
				<s:HGroup width="100%" height="15%" horizontalAlign="center" verticalAlign="middle">
					<s:Button id="backToCSVButton" label="Go back to CSV" click="backToCSVButton_clickHandler(event)"
							  visible="{csvDoneFlag}" includeInLayout="{csvDoneFlag}"/>
					<s:Button id="panel1NextButton" label="Go to next" click="panel1NextButton_clickHandler(event)"
							  visible="true" includeInLayout="true"/>
					<s:Button id="panel1EditButton" label="Edit" click="panel1EditButton_clickHandler(event)"
							  visible="false" includeInLayout="false"/>
					<s:Button id="panel1DoneButton" label="Done" click="panel1DoneButton_clickHandler(event)"
							  visible="false" enabled="false" includeInLayout="false"/>
				</s:HGroup>
			</s:VGroup>
			
		</s:Panel>
		
		<s:Panel id="panel2" includeIn="state2,state3,result" width="40%" height="60%" 
				 x="{inputPane.width*0.53}" y="{inputPane.height*0.06}"
				 title="Population Data">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				<s:VGroup id="PopnParams" horizontalAlign="left" verticalAlign="middle"
						  width="70%" height="85%">
					
					<s:Label id="popnMeanLabel" text="Population mean"/>
					<s:TextInput id="popnMeanInput" width="60%" prompt="Enter a numeric value"
								 restrict="0-9." focusOut="checkNumber(event)"/>
					<s:Spacer height="5%"/>
					<s:Label text="Significance Value"/>
					<s:TextInput id="sigLevelInput" width="60%" prompt="Enter a value between 0-1"
								 restrict="0-9." text="0.05" focusOut="checkNumber(event)"/>
					<!-- Placeholder for Population Data elements-->
					
				</s:VGroup>
				<s:HGroup width="100%" height="15%" horizontalAlign="center" verticalAlign="middle">
					<s:Button id="panel2NextButton" label="Go to Next" click="panel2NextButton_clickHandler(event)"
							  visible = "true" includeInLayout="true"/>
					<s:Button id="panel2EditButton" label="Edit" click="panel2EditButton_clickHandler(event)"
							  visible = "false" includeInLayout="false"/>
					<s:Button id="panel2DoneButton" label="Done" click="panel2DoneButton_clickHandler(event)"
							  visible = "false" includeInLayout="false" enabled="false"/>
				</s:HGroup>
			</s:VGroup>
		</s:Panel>
		
		<s:HGroup width="95%" height="30%" horizontalAlign="left" verticalAlign="middle"
				  x="{inputPane.width*0.07}" y="{inputPane.height*0.7}">
			<s:Panel id="panel3" includeIn="state3,result" width="60%" height="90%"
					 title="Hypotheses">
				<s:HGroup width="100%" height="100%" horizontalAlign="center"
						  verticalAlign="middle">
					
					<s:VGroup width="40%" height="80%" horizontalAlign="left" verticalAlign="middle">
						<s:Label text="Null Hypothesis" fontSize="18" fontWeight="bold"/>
						<s:Spacer height="10%"/>
						
						<s:HGroup verticalAlign="middle" paddingLeft="3" paddingRight="3">
							<s:Label text="{varName}" fontSize="13" fontWeight="bold"/>
							<s:ComboBox id="hypoExpression" prompt="Expression" 
										change="hypoExpression_changeHandler(event)"
										labelField="text" width="40">
								<s:dataProvider>
									<s:ArrayList>
										<fx:Object text="="/>
										<fx:Object text="&gt;="/>
										<fx:Object text="&lt;="/>
									</s:ArrayList>
								</s:dataProvider>
							</s:ComboBox>
							<s:Label text="{popnMeanValue}" fontSize="13" fontWeight="bold"/>
						</s:HGroup>
						
					</s:VGroup>
					
					<s:Spacer width="5%"/>
					
					<s:VGroup id="altHypo" width="40%" height="80%" 
							  horizontalAlign="left" verticalAlign="middle"
							  visible="false">
						<s:Label text="Alternative Hypothesis" fontSize="18" fontWeight="bold"/>
						<s:Spacer height="10%"/>
						
						<s:HGroup verticalAlign="middle" paddingLeft="3" paddingRight="3">
							<s:Label text="{varName}" fontSize="13" fontWeight="bold"/>
							<s:Label id="alternateExpr" text="" fontSize="13"/>
							<s:Label text="{popnMeanValue}" fontSize="13" fontWeight="bold"/>
						</s:HGroup>
						
					</s:VGroup>
					
				</s:HGroup>
				
			</s:Panel>
			<s:Spacer width="15%"/>
			<s:Button width="100" height="50" label="Compute" id="compute" includeIn="state3,result"
					  click="compute_clickHandler(event)"/>
		</s:HGroup>
		
	</s:Group>
	
	<s:Group id="helpResultPane" width="30%" height="100%"
			 x="{this.width*0.7}" y="0">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<s:Panel id="help1" width="85%" height="30%" 
				 x="{helpResultPane.width*0.07}" y="{helpResultPane.height*0.05}"
				 title="Flow of Execution" excludeFrom="result">
			
		</s:Panel>
		
		<s:Panel id="help2" width="85%" height="57%" excludeFrom="result"
				 x="{helpResultPane.width*0.07}" y="{helpResultPane.height*0.38}"
				 title="General Help">
			
		</s:Panel>
		
		<s:TextArea width="85%" height="38%" x="{helpResultPane.width*0.07}"
					id="output" y="{helpResultPane.height*0.05}"
					includeIn="result"/>
		<s:Image width="96%" height="48%" includeIn="result"
				 x="{helpResultPane.width*0.02}" y="{helpResultPane.height*0.45}"
				 id="imgViewer" click="imgViewer_clickHandler(event)"/>
		
	</s:Group>
</s:Group>