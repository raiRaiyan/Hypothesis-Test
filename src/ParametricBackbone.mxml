<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 currentState="state1"
		 creationComplete="backboneCreationCompleteHandler(event)">
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			//File Variable for the browse
			private var file:File;
			
			//Public flags to indicate completion of input in a panel
			public var panel1Flag:Boolean = false;
			public var panel2Flag:Boolean = false;
			public var hypoFlag:Boolean = false;
			
			//Public variables needed for the UI
			public var popnMeanValue:Number;
			public var varName:String = null;
			
			//Variables needed for the native process
			private var tails:int; //0 - 2 tailed, 1 - lower tail, 2 - upper tail
			
			//variables for the native process startup info
			public var proc:NativeProcess = null;
			public var procInfo:NativeProcessStartupInfo = null;
			
			public var exe:File = new File("C:/Program Files/R/R-3.2.1/bin/Rscript.exe");
			public var workingDir:File = new File("./working/");
			public var args:Vector.<String> = null;
			public var rFile:String = null;
			
			//Inherit this method to add elements to the backbone
			protected function backboneCreationCompleteHandler(event:FlexEvent):void
			{
				// This will be called in Inherited class to add the test specific components
			}
			
			private function browseButton_clickHandler(event:MouseEvent):void
			{
				file = new File();
				var filter:FileFilter = new FileFilter("Data File","*.csv");
				file.browseForOpen("Select a CSV file",[filter]);
				file.addEventListener(Event.SELECT,fileSelected);
			}
			
			private function fileSelected(evt:Event):void
			{
				csvPath.text = file.name+" { "+file.nativePath+" }";
				//Read CSV here
				
				csvData.visible=true;
			}
			
			protected function compute_clickHandler(event:MouseEvent):void
			{
				if(hypoFlag==true)
				{
					currentState='result';
				}
				
				proc=new NativeProcess();
				procInfo = new NativeProcessStartupInfo();
				
				procInfo.executable = exe;
				procInfo.arguments = args;
				procInfo.workingDirectory = workingDir;
				
				//Event Handlers
				proc.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
				proc.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
				proc.addEventListener(NativeProcessExitEvent.EXIT,onProcessExit);
				
				proc.start(procInfo);
				
			}
			
			public function onOutputData(event:ProgressEvent):void
			{

			}
			
			public function onErrorData(event:ProgressEvent):void
			{

			}
			
			public function onProcessExit(event:NativeProcessExitEvent):void
			{
				
			}
			
			protected function panel1NextButton_clickHandler(event:MouseEvent):void
			{
				//set the variable varName if its null
				//set it as X or X-Y depending on the test
				
				//dummy for now - set the value from inherited class
				if(varName==null)
				{
					varName="X-Y";
				}
				
				//Inherited class must set the flag to true after it gets all the values
				//Currently set to false for testing 
				if(panel1Flag==false)
				{
					currentState='state2';
				}
			}
			
			protected function panel2NextButton_clickHandler(event:MouseEvent):void
			{
				
				if(popnMeanInput.text!="")
				{
					popnMeanValue=Number(popnMeanInput.text);
					panel2Flag=true;
				}
				//Inherited class must set the flag to true after it gets all the values
				if(panel2Flag==true)
				{
					currentState='state3';
				}
			}
			
			protected function csvPaneDoneButton_clickHandler(event:MouseEvent):void
			{
				//Set the variable varName to be shown in Hypothesis Panel
				//If its one column then directly set the string to column name
				//If its difference bw means, set string as difference bw two variables
				
				//dummy for now - set the value from inherited class
				varName="X-Y";
				currentState='state1Final';
			}
			
			protected function hypoExpression_changeHandler(event:IndexChangeEvent):void
			{
				if(hypoExpression.selectedIndex==-3)
				{
					hypoExpression.selectedIndex=-1;
				}
				else
				{
					switch(hypoExpression.selectedIndex)
					{
						case 0:
							alternateExpr.text = "Not Equals";
							tails=0;
							break;
						case 1:
							alternateExpr.text = "Less than";
							tails=1;
							break;
						case 2:
							alternateExpr.text = "Greater than";
							tails=2;
							break;
					}
					altHypo.visible=true;
					hypoFlag=true;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="state1"/>
		<s:State name="loadCSV"/>
		<s:State name="state1Final"/>
		<s:State name="state2"/>
		<s:State name="state3"/>
		<s:State name="result"/>
	</s:states>
	
	<s:transitions>
		
		<s:Transition fromState="state1" toState="loadCSV">
			<s:Resize target="{panel1}" widthTo="{inputPane.width*0.8}" heightTo="{inputPane.height*0.8}"/>
		</s:Transition>
		
		<s:Transition fromState="loadCSV" toState="state1Final">
			<s:Resize target="{panel1}" widthTo="{inputPane.width*0.4}" heightTo="{inputPane.height*0.6}"/>
		</s:Transition>
		
		<s:Transition fromState="state1Final" toState="state2">
			<s:Parallel target="{panel2}">
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="state2" toState="state3">
			<s:Parallel targets="{[panel3]}">
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="state3" toState="result">
			<s:Parallel targets="{[output,imgViewer]}">
				<s:AddAction targets="{[output,imgViewer]}"/>
				<s:Move3D zFrom="-100" duration="700"/>
				<s:Fade duration="500"/>
			</s:Parallel>
		</s:Transition>
		
	</s:transitions>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML xmlns="" id="stringCollection" source="strings/StringCollection.xml"/>
	</fx:Declarations>
	
	<mx:HDividedBox id="divider" width="100%" height="100%">
		
		<s:Group id="inputPane" width="70%" height="100%" minWidth="{this.width*0.6}">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			
			<s:Panel id="panel1" width="40%" height="60%" 
					 width.loadCSV="80%"
					 height.loadCSV="80%"
					 x="{inputPane.width*0.07}" y="{inputPane.height*0.06}"
					 title="Sample Data">
				
				<s:VGroup id="OptionsPane" horizontalAlign="center" verticalAlign="middle"
						  width="100%" height="100%" includeIn="state1">
					<s:Button label="I have CSV" click="currentState='loadCSV';"/>
					<s:Button label="I have data" click="currentState='state1Final';"/>
				</s:VGroup>
				
				<s:VGroup id="csvPane" horizontalAlign="center" verticalAlign="middle"
						  width="100%" height="100%" includeIn="loadCSV">
					<s:HGroup width="95%" height="15%" horizontalAlign="left" verticalAlign="middle">
						<s:TextInput width="70%" height="30" id="csvPath" prompt="Browse for the file"
									 fontSize="14"/>
						<s:Spacer width="5%"/>
						<s:Button width="100" height="30" id="browseButton" 
								  label="Browse" click="browseButton_clickHandler(event)"
								  fontSize="14"/>
					</s:HGroup>
					<s:HGroup width="100%" height="80%" horizontalAlign="center" verticalAlign="middle">
						<s:Spacer width="1%"/>
						<s:DataGrid width="68%" height="95%" id="csvData" visible="false"/>
						<s:Spacer width="1%"/>
						<s:VGroup width="30%" height="100%" horizontalAlign="center" verticalAlign="middle">
							
							<s:VGroup width="100%" height="85%" id="columnSelectionPane"
									  horizontalAlign="center" verticalAlign="middle">
								
								<!--Child components for column selection inherited class goes here-->
								
							</s:VGroup>
							
							<s:Button click="csvPaneDoneButton_clickHandler(event)" label="Done" id="csvPaneDoneButton"
									  width="100" height="30" fontSize="14"/>
							
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
				
				<s:VGroup id="finalPanel1" horizontalAlign="center" verticalAlign="middle"
						  width="100%" height="100%" includeIn="state1Final,state2,state3,result">
					<s:VGroup id="SampleParams" horizontalAlign="center" verticalAlign="middle"
							  width="95%" height="85%">
						
						<!-- Placeholder for Sample Data elements-->
						
					</s:VGroup>
					<s:Button id="panel1NextButton" label="Go to next" click="panel1NextButton_clickHandler(event)"/>
				</s:VGroup>
				
			</s:Panel>
			
			<s:Panel id="panel2" includeIn="state2,state3,result" width="40%" height="60%" 
					 x="{inputPane.width*0.53}" y="{inputPane.height*0.06}"
					 title="Population Data">
				<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
					<s:VGroup id="PopnParams" horizontalAlign="left" verticalAlign="middle"
							  width="80%" height="85%">
						
						<s:Label id="popnMeanLabel" text="Population mean"/>
						<s:TextInput id="popnMeanInput" width="60%" prompt="Enter a numeric value"
									 restrict="0-9."/>
						<!-- Placeholder for Population Data elements-->
						
					</s:VGroup>
					<s:Button id="panel2NextButton" label="Go to Next" click="panel2NextButton_clickHandler(event)"/>
				</s:VGroup>
			</s:Panel>
			
			<s:HGroup width="95%" height="30%" horizontalAlign="left" verticalAlign="middle"
					  x="{inputPane.width*0.07}" y="{inputPane.height*0.7}">
				<s:Panel id="panel3" includeIn="state3,result" width="60%" height="90%"
						 title="Hypotheses">
					<s:HGroup width="100%" height="100%" horizontalAlign="center"
							  verticalAlign="middle">
						
						<s:VGroup width="40%" height="80%" horizontalAlign="left" verticalAlign="middle">
							<s:Label text="Null Hypothesis" fontSize="18" fontWeight="bold"/>
							<s:Spacer height="10%"/>
							
							<s:HGroup verticalAlign="middle" paddingLeft="3" paddingRight="3">
								<s:Label text="{varName}" fontSize="13" fontWeight="bold"/>
								<s:ComboBox id="hypoExpression" prompt="Expression" 
											change="hypoExpression_changeHandler(event)"
											labelField="text">
									<s:dataProvider>
										<s:ArrayList>
											<fx:Object text="equals"/>
											<fx:Object text="greater/equals"/>
											<fx:Object text="less/equals"/>
										</s:ArrayList>
									</s:dataProvider>
								</s:ComboBox>
								<s:Label text="{popnMeanValue}" fontSize="13" fontWeight="bold"/>
							</s:HGroup>
						
						</s:VGroup>
						
						<s:Spacer width="5%"/>
						
						<s:VGroup id="altHypo" width="40%" height="80%" 
								  horizontalAlign="left" verticalAlign="middle"
								  visible="false">
							<s:Label text="Alternative Hypothesis" fontSize="18" fontWeight="bold"/>
							<s:Spacer height="10%"/>
							
							<s:HGroup verticalAlign="middle" paddingLeft="3" paddingRight="3">
								<s:Label text="{varName}" fontSize="13" fontWeight="bold"/>
								<s:Label id="alternateExpr" text=""/>
								<s:Label text="{popnMeanValue}" fontSize="13" fontWeight="bold"/>
							</s:HGroup>
						
						</s:VGroup>
						
					</s:HGroup>

				</s:Panel>
				<s:Spacer width="15%"/>
				<s:Button width="100" height="50" label="Compute" id="compute" includeIn="state3,result"
						  click="compute_clickHandler(event)"/>
			</s:HGroup>
			
		</s:Group>
		
		<s:Group id="helpResultPane" width="30%" height="100%" minWidth="{this.width*0.30}"
				 x="{this.width*0.7}" y="0">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			
			<s:Panel id="help1" width="85%" height="30%" 
					 x="{helpResultPane.width*0.07}" y="{helpResultPane.height*0.05}"
					 title="Flow of Execution" excludeFrom="result">
				
			</s:Panel>
			
			<s:Panel id="help2" width="85%" height="57%" excludeFrom="result"
					 x="{helpResultPane.width*0.07}" y="{helpResultPane.height*0.38}"
					 title="General Help">
				
			</s:Panel>
			
			<s:BorderContainer width="85%" height="38%" x="{helpResultPane.width*0.07}"
							   id="output" y="{helpResultPane.height*0.05}"
							   includeIn="result"/>
			<s:Image width="96%" height="48%" includeIn="result"
					 x="{helpResultPane.width*0.02}" y="{helpResultPane.height*0.45}"
					 id="imgViewer" source="@Embed('assets/tdist.png')"/>
			
		</s:Group>
		
	</mx:HDividedBox>
	
</s:Group>